name: Release Desktop

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Version bump (patch, minor, major)"
        required: false
        default: patch
      ref:
        description: "Branch or commit to release (defaults to main tip)"
        required: false
        default: "main"

jobs:
  metadata:
    name: Determine release metadata
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tag_name: ${{ steps.meta.outputs.tag_name }}
      commit_sha: ${{ steps.meta.outputs.commit_sha }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.sha }}
          fetch-depth: 0

      - name: Read version and commit
        id: meta
        env:
          BUMP: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.bump || 'patch' }}
        run: |
          git fetch --tags --force
          LAST_TAG="$(git tag --list 'desktop-v*' --sort=-v:refname | head -n 1)"
          if [ -z "$LAST_TAG" ]; then
            VERSION_BASE="0.0.0"
          else
            VERSION_BASE="${LAST_TAG#desktop-v}"
          fi

          if [[ ! "$VERSION_BASE" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Last tag (${LAST_TAG:-none}) is not in x.y.z format." >&2
            exit 1
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_BASE"

          case "${BUMP}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch|"")
              PATCH=$((PATCH + 1))
              ;;
            *)
              echo "Unsupported bump '${BUMP}'. Use patch, minor, or major." >&2
              exit 1
              ;;
          esac

          VERSION="${MAJOR}.${MINOR}.${PATCH}"
          TAG="desktop-v${VERSION}"
          COMMIT_SHA="$(git rev-parse HEAD)"

          echo "last_tag=${LAST_TAG:-none}" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG" >> "$GITHUB_OUTPUT"
          echo "commit_sha=$COMMIT_SHA" >> "$GITHUB_OUTPUT"

      - name: Create or update tag
        uses: actions/github-script@v7
        env:
          TAG_NAME: ${{ steps.meta.outputs.tag_name }}
          TARGET_SHA: ${{ steps.meta.outputs.commit_sha }}
        with:
          script: |
            const tagName = process.env.TAG_NAME;
            const targetSha = process.env.TARGET_SHA;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            core.info(`Ensuring tag ${tagName} points to ${targetSha}`);

            try {
              const ref = await github.rest.git.getRef({
                owner,
                repo,
                ref: `tags/${tagName}`,
              });

              if (ref.data.object.sha !== targetSha) {
                await github.rest.git.updateRef({
                  owner,
                  repo,
                  ref: `tags/${tagName}`,
                  sha: targetSha,
                  force: true,
                });
                core.info(`Updated existing tag ${tagName} to ${targetSha}`);
              } else {
                core.info(`Tag ${tagName} already points to ${targetSha}`);
              }
            } catch (error) {
              if (error.status === 404) {
                await github.rest.git.createRef({
                  owner,
                  repo,
                  ref: `refs/tags/${tagName}`,
                  sha: targetSha,
                });
                core.info(`Created tag ${tagName} at ${targetSha}`);
              } else {
                throw error;
              }
            }

  build:
    name: Build ${{ matrix.label }}
    needs: metadata
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - label: macOS (universal)
            os: macos-14
            args: "--target universal-apple-darwin"
            rust_targets: "aarch64-apple-darwin,x86_64-apple-darwin"
            tauri_platform: macos
            node_platform: darwin
          - label: Linux
            os: ubuntu-22.04
            args: ""
            rust_targets: ""
            tauri_platform: linux
            node_platform: linux
          - label: Windows
            os: windows-latest
            args: ""
            rust_targets: ""
            tauri_platform: windows
            node_platform: win32
    runs-on: ${{ matrix.os }}
    env:
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}
      TAURI_UPDATER_PUBLIC_KEY: ${{ secrets.TAURI_UPDATER_PUBLIC_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.metadata.outputs.commit_sha }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.0
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Sync Tauri version
        shell: bash
        env:
          VERSION: ${{ needs.metadata.outputs.version }}
        run: |
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const version = process.env.VERSION;
          if (!version) {
            throw new Error('VERSION env var not provided');
          }
          const filePath = path.join('apps', 'desktop', 'src-tauri', 'tauri.conf.json');
          const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
          data.version = version;
          fs.writeFileSync(filePath, JSON.stringify(data, null, 2) + '\n');
          EOF

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_targets }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            apps/desktop/src-tauri -> target

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libwebkit2gtk-4.1-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install dependencies
        run: npm ci

      - name: Turbo build desktop workspace
        run: npm run build -- --filter=desktop...
        env:
          TAURI_PLATFORM: ${{ matrix.tauri_platform }}
          VOQUILL_DESKTOP_PLATFORM: ${{ matrix.node_platform }}

      - name: Build and publish
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PLATFORM: ${{ matrix.tauri_platform }}
          VOQUILL_DESKTOP_PLATFORM: ${{ matrix.node_platform }}
        with:
          projectPath: apps/desktop
          tauriScript: npm run --workspace desktop tauri
          args: ${{ matrix.args }}
          tagName: ${{ needs.metadata.outputs.tag_name }}
          releaseName: Desktop v${{ needs.metadata.outputs.version }}
          releaseBody: "Release for desktop v${{ needs.metadata.outputs.version }}"
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
